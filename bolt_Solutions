#Exercises from SQL Bolt tutorial :

https://sqlbolt.com/lesson/select_queries_introduction

SELECT Queries 101

1.1

    -SELECT title FROM movies;

1.2

    -SELECT director FROM movies;

1.3

    -SELECT title, director FROM movies;

1.4

    -SELECT title, year FROM movies;

1.5

    -SELECT * FROM movies;


Queries with Constraints (Pt.1)

2.1

    -SELECT title FROM movies WHERE id LIKE "6"

2.2

    -SELECT title, year FROM movies WHERE year BETWEEN 2000 AND 2010

2.3

    -SELECT title, year FROM movies WHERE year NOT BETWEEN 2000 AND 2010

2.4

    -SELECT title, year FROM movies ORDER BY year ASC LIMIT 5

Queries with Constraints (pt.2)

3.1

    -SELECT title FROM movies WHERE title LIKE "%toy%";

3.2

    -SELECT title FROM movies WHERE director LIKE "%john%";

3.3

    -SELECT title FROM movies WHERE director NOT LIKE "%john%";

3.4

    -SELECT title FROM movies WHERE title LIKE "%WALL%";

Filtering and Sorting Query Results

4.1

    -SELECT DISTINCT director FROM movies ORDER BY director ASC;

4.2

    -SELECT DISTINCT director FROM movies ORDER BY director ASC;

4.3

    -SELECT title, director FROM movies ORDER BY title ASC LIMIT 5

4.4

    -SELECT title, director FROM movies ORDER BY title ASC LIMIT 5 OFFSET 5


SQL Review: Simple SELECT Queries

5.1

    -SELECT city, country, population FROM north_american_cities WHERE country LIKE "Canada";

5.2

    -SELECT * FROM north_american_cities WHERE country LIKE "United States" ORDER BY latitude DESC

5.3

    -SELECT * FROM north_american_cities WHERE longitude < -88 ORDER BY longitude ASC

5.4

    -SELECT city, population, country FROM north_american_cities WHERE country = "Mexico" ORDER BY population DESC LIMIT 2;

5.5

    -SELECT city, population, country FROM north_american_cities WHERE country = "United States" ORDER BY population DESC LIMIT 2 OFFSET 2;


Multi-table Queries with JOINs

6.1

   -SELECT title, International_sales, domestic_sales FROM movies JOIN boxoffice ON movies.id = boxoffice.movie_id;

6.2

    -SELECT title, international_sales, domestic_sales FROM movies JOIN boxoffice ON movies.id = boxoffice.movie_id
WHERE international_sales > domestic_sales

6.3

    -SELECT title, rating FROM movies JOIN boxoffice ON movies.id = boxoffice.movie_id ORDER BY rating DESC

OUTER JOINs

7.1

    -SELECT DISTINCT building FROM employees;

7.2
    -SELECT * FROM buildings;

7.3
    -SELECT DISTINCT building_name, role
FROM buildingsLEFT JOIN employees ON buildings.building_name = employees.building;


A Short Note on NULLs

8.1
    -SELECT * FROM employees LEFT JOIN buildings ON employees.building = buildings.building_name WHERE building_name IS NULL;

8.2
    -SELECT * FROM buildings LEFT JOIN employees ON buildings.building_name = employees.building WHERE role IS NULL;

Queries with Expressions

9.1
    -SELECT title, (domestic_sales + international_sales)/1000000 AS sales FROM boxoffice AS b INNER JOIN movies AS m ON m.id = b.movie_id;

9.2
    - SELECT title, rating*10 AS ratings_percent FROM boxoffice AS b INNER JOIN movies AS m ON m.id = b.movie_id

9.3
    -SELECT title, year FROM boxoffice AS b INNER JOIN movies AS m ON m.id = b.movie_id WHERE year % 2 = 0 ORDER BY year ASC;

Queries with aggregates (Pt.1)

10.1
    -SELECT MAX(years_employed) as longest_years FROM employees;

10.2
    -SELECT role, AVG(years_employed)AS average_years_employed FROM employees GROUP BY role;

10.3
    -SELECT building, SUM(years_employed)AS sum_of_years_employed FROM employees GROUP BY building;

Queries with aggregates (Pt.2)

11.1
    -SELECT COUNT(role) FROM employees WHERE role = 'Artist';

11.2
    -SELECT role, COUNT(name) AS number_of_employees FROM employees GROUP BY role;

11.3
    -SELECT role, SUM(years_employed) FROM employees GROUP BY role HAVING role = "Engineer";

Order of execution of a query

12.1
    -SELECT director, COUNT(*) FROM movies GROUP BY director;

12.2
SELECT director, SUM(domestic_sales + international_sales) AS total_sales FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id GROUP BY director;

Inserting rows

13.1
    -INSERT INTO movies (title, director, year, length_minutes) VALUES ('Toy Story 4', 'Lance Lafontaine', 2984, 15);

13.2
    -INSERT INTO boxoffice (movie_id, rating, domestic_sales, international_sales) VALUES
    (15, 8.7, 340000000, 270000000);

Updating rows

14.1
    -UPDATE movies SET director = "John Lasseter" WHERE title = "A Bug's Life";

14.2
    -UPDATE movies SET title = 'Toy Story 3', director = 'Lee Unkrich' WHERE id = (SELECT id FROM movies WHERE title = 'Toy Story 8');

Deleting rows

15.1
    -DELETE FROM movies WHERE year < 2005;

15.2
    -DELETE FROM movies WHERE director = 'Andrew Stanton';

Creating tables

16.1
    -CREATE TABLE IF NOT EXISTS Database (Name TEXT, Version FLOAT, Download_count INTEGER);

Altering tables

17.1
    -ALTER TABLE movies ADD aspect_ratio FLOAT;

17.2
    -ALTER TABLE movies ADD language TEXT DEFAULT 'English';

Dropping tables

18.1
    -DROP TABLE IF EXISTS mytable;

18.2
    -DROP TABLE IF EXISTS boxoffice;
